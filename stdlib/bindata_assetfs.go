// Code generated by go-bindata.
// sources:
// src/logic.nolol
// src/math.nolol
// src/string.nolol
// DO NOT EDIT!

package stdlib

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _logicNolol = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x52\x4f\x6f\xd3\x4e\x10\xbd\xfb\x53\xbc\x5f\x54\xa9\xc9\x8f\x04\x37\x1c\x29\xe1\xc0\xad\x57\x04\xe7\x6a\xd7\x1e\xdb\xa3\xda\x33\xd6\xec\x2c\x29\xdf\x1e\xad\x43\xd3\xa4\xe5\x64\xc9\xf3\xf4\xfe\x6e\x5d\xe3\xc7\xc0\x09\x1d\x8f\x84\x46\xc5\x03\x4b\x42\x0c\x89\x1b\xb4\xd4\xb1\xb0\xb3\x4a\x42\x90\x16\x53\x68\x4c\x13\x3a\x35\x8c\xda\x73\xb3\xd3\x99\x2c\x2c\xf7\xaa\xae\xf1\x30\xcd\x6a\x8e\x9c\x58\x7a\xdc\x82\xa5\x19\x73\x4b\x58\x25\x6f\xeb\x05\xbf\xc2\x6d\x55\x80\xdf\xc9\xb3\x15\x4e\x70\x57\x34\xdb\x45\x03\x9c\xe0\x96\x69\x0b\xf5\x81\xec\xc8\x89\x10\x0b\xfc\x8c\xd8\x22\x2c\x3e\x22\xa6\x9c\x1c\x91\x20\x79\x8a\x64\xe9\xe3\x05\xcb\xcb\xe9\x0e\x6a\xd8\x57\x8b\xe7\x93\xdd\x47\x27\x93\x60\xbf\xd7\x97\x84\x5b\xc4\x0d\xe8\x79\xb6\x0a\x00\x22\x3e\x60\x1d\x76\x71\xf3\xff\x19\x53\x91\xb4\x8b\xeb\x87\x37\x5e\xef\xb6\x98\x4d\xdb\xdc\x50\x49\x62\x59\x9c\x27\xda\x91\x99\x1a\x7c\x08\x8e\x23\x8f\x23\xd2\x13\xcf\xf0\x81\x60\x34\x05\x96\x52\xcd\xc8\x42\x85\xf0\x67\x0a\x3d\x7d\xc6\xea\x64\xae\x74\xcf\x92\xe9\xb1\x9c\xd7\xbf\x82\x6d\xee\xd1\xea\x61\x7f\x8f\xe4\xb9\xeb\x0e\x9f\x70\xb3\xaa\x96\xb5\x08\x37\x45\x9f\x97\xba\x83\x38\x5c\x21\xea\x7f\xa5\x54\x31\xe5\x66\xb8\x0a\x7e\xcd\x7d\x4e\xb1\xf9\xc2\xbd\xa8\xd1\xd7\x93\xa5\x52\xc0\xe9\x47\x7d\x78\x1f\xff\x65\xb4\x7d\x19\x2d\x94\x72\xe3\xeb\x62\x31\xfb\x62\x21\xaa\x0f\x05\xfc\x76\xa7\x7f\x8c\xf1\xac\xb6\x0e\xdb\xcb\xf2\x03\xfe\x3b\x20\x9e\x05\xbf\x8d\xda\x3c\x25\x84\x84\x51\xa5\x2f\xdf\x77\x4f\xe5\x8a\xf0\x18\xd8\x2f\xb2\xbd\x66\x1a\xa8\x44\xbc\x7a\x6a\x3e\x90\xa0\x57\xd7\xe5\x88\x22\x49\xd2\xfe\x09\x00\x00\xff\xff\x58\x96\xdd\x23\x0c\x03\x00\x00")

func logicNololBytes() ([]byte, error) {
	return bindataRead(
		_logicNolol,
		"logic.nolol",
	)
}

func logicNolol() (*asset, error) {
	bytes, err := logicNololBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "logic.nolol", size: 780, mode: os.FileMode(438), modTime: time.Unix(1618592854, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mathNolol = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x4f\x8f\xd3\x30\x10\xc5\xcf\xf6\xa7\x78\xac\xb4\xda\xa6\xff\x92\x14\x24\x38\x6c\xf6\xbe\x57\x84\xc4\x8d\x95\x9d\x4c\x9a\x51\x53\xbb\xd8\x13\xea\x8f\x8f\x9c\x2e\x4b\xa9\x90\x10\x17\x5b\xf1\xcc\x7b\xbf\x3c\x7b\xca\x12\x5f\x06\x8e\xe8\x79\x24\xb4\xde\x89\x61\x17\x61\x4d\xe4\x16\x1d\xf5\xec\x58\xd8\xbb\x08\xe3\x3a\x1c\x4d\x1b\x7c\x44\xef\x03\x8e\x46\x06\x5d\x96\x78\x3e\x9e\x7c\x10\x4c\x91\xdd\x1e\x0f\x60\xd7\x8e\x53\x47\xb8\x8b\xd2\x95\xb9\xe7\x0e\x0f\x5a\xcf\x0c\x9a\x35\x74\x34\xc2\xad\x19\x33\x2a\x8a\x71\x82\x13\xeb\x99\x73\xa9\xbf\x9c\xb8\x79\xbf\xad\x3f\xd4\xff\x50\xd1\x1f\x22\x6a\x76\xdb\x8f\xf5\xa7\x59\xf3\x99\x64\x0a\x2e\x42\x06\x82\xb1\xd1\x8f\x93\x10\x7e\x98\x71\x22\xf8\x1e\x69\x9b\x7b\xbe\xfa\x70\x88\xf0\x0e\xe6\x92\x74\xd3\x0e\x7c\xd2\x73\xbc\x8b\xa1\xb1\xf1\x65\xae\x2c\x52\x01\x4a\xa7\xa0\xd5\x22\x3d\x35\x55\xb1\x4c\x9b\x45\x7a\xcc\xbb\x26\xd7\xcd\xc0\xe7\x1e\x09\x1c\xf1\x54\xad\x11\x5e\xe1\x35\xb8\xc7\x63\xf5\xfa\x8d\x4d\xbd\x86\x97\x81\xc2\x99\x23\xbd\x35\x55\xd7\xc4\xc8\x7b\x77\x0b\xcb\xa8\xa6\x2a\xde\x48\xd7\xd1\x1c\x25\xc1\xe8\xcf\x14\xc0\x4e\x68\x4f\x01\xe2\x91\x2e\x6d\xdf\x27\x0e\x14\x61\x04\x23\x99\x28\xbf\x62\xe2\x36\x66\x3f\x7a\x1f\x7e\x53\xd3\x26\xdd\xd7\xff\x45\xbb\xf5\xba\xbd\xb4\x54\xd6\x55\x55\x2d\xf3\xf2\x57\x5f\xcb\x32\x5f\x49\xf2\x21\xbf\x8e\x99\xc7\xcc\x82\x1d\xfc\x24\xd7\xee\xc9\x87\x85\x59\xc3\xae\x73\xa1\x80\x1d\x7d\x7b\xd0\xca\x4f\xd2\x54\x5a\xb5\x12\xf2\x76\x1e\xf2\x0c\xd7\xe8\xbc\x56\xb9\xb4\x6a\x16\xe6\x7e\xf7\xae\xb1\xf7\xbb\x62\xb9\xfb\xd6\x4a\x58\xad\xa0\x95\x32\xcd\x55\x78\x53\xee\x0a\xad\x94\xbd\x3e\xb3\x97\x33\xee\x61\x56\xb6\x69\xaa\xfc\xab\x4e\x2b\xa5\x6c\x20\x73\xc8\x16\x39\xcb\xbc\x90\xeb\x7e\x06\x00\x00\xff\xff\xbf\xbb\xa8\x65\x42\x03\x00\x00")

func mathNololBytes() ([]byte, error) {
	return bindataRead(
		_mathNolol,
		"math.nolol",
	)
}

func mathNolol() (*asset, error) {
	bytes, err := mathNololBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "math.nolol", size: 834, mode: os.FileMode(438), modTime: time.Unix(1618592198, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stringNolol = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x91\xc1\xae\x94\x40\x10\x45\xf7\x7c\xc5\x1d\x36\xcf\x97\x11\x89\x1f\x80\x89\x4b\xb7\xc6\xbd\x69\xa1\x80\x4a\xa0\xba\x53\x55\x4c\xf8\x7c\xd3\x0d\x33\x71\xc6\xb8\x70\x49\x71\xeb\x9e\x53\xe9\xb6\xc5\x8f\x99\x0d\x23\x2f\x84\x3e\x8a\x07\x16\xc3\xaf\x60\xdc\x63\xa0\x91\x85\x9d\xa3\x18\x82\x0c\x58\x43\xaf\xd1\x30\x46\x85\xb9\xb2\x4c\xcd\x1a\x84\xd3\xb6\x84\x9c\xa9\xda\x16\xdf\xd6\x14\xd5\xb1\x19\xcb\x84\x37\xb0\xf4\xcb\x36\x10\x6a\xf3\xa1\x3d\x56\x6a\xbc\x55\x39\xf9\x9d\xd6\x78\x23\x83\xcf\x84\x25\x98\xa3\x9f\x83\x86\xde\x49\x31\x6a\x5c\x33\xa0\x30\x95\x7c\x53\x31\xb0\x57\x05\x7f\x92\x7f\xa6\x98\x3e\x98\xeb\x3b\x68\x4f\x5a\x01\xc8\x3f\x9a\xa6\x31\xd7\x8a\x64\x38\x19\xc7\xee\x67\xf0\x58\x0a\x1f\xf7\xed\xcf\x65\xf7\x79\x6e\xfc\xb8\xbf\x74\xee\x97\xee\xcf\xd2\xaf\xc3\x70\x5a\x93\x4c\xb3\x23\x1e\xd5\x1e\x11\x37\xcf\x81\xfc\xc5\x06\x23\xcf\xc3\xba\x06\x4b\xc9\x27\x8d\x3d\x99\x3d\x93\x17\x92\x02\xcd\xcb\xef\x58\x58\xa8\x70\x67\x52\xfa\x72\xb7\xbe\x74\xb9\xc5\x67\x92\xe3\xc6\x9c\xbd\x5e\x31\x45\x8f\x25\x88\xac\xf6\xd0\x4b\x89\xe4\x34\x54\xba\x91\x1a\x3d\x2b\x7e\xfa\x6f\xc7\xb3\xa6\x78\xfe\x5b\xf3\xd2\xdd\x25\xb3\x5e\xf7\xfa\x4c\x7f\xd9\xfe\x0e\x00\x00\xff\xff\x15\x54\x89\x18\x79\x02\x00\x00")

func stringNololBytes() ([]byte, error) {
	return bindataRead(
		_stringNolol,
		"string.nolol",
	)
}

func stringNolol() (*asset, error) {
	bytes, err := stringNololBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "string.nolol", size: 633, mode: os.FileMode(438), modTime: time.Unix(1618428089, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"logic.nolol": logicNolol,
	"math.nolol": mathNolol,
	"string.nolol": stringNolol,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"logic.nolol": &bintree{logicNolol, map[string]*bintree{}},
	"math.nolol": &bintree{mathNolol, map[string]*bintree{}},
	"string.nolol": &bintree{stringNolol, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
